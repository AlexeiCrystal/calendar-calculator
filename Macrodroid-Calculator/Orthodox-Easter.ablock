{"macro":{"isInputExpanded":true,"isLocalExpanded":false,"isOutputExpanded":true,"isTestMode":false,"disabledTimestamp":0,"forceEvenIfNotEnabledTimestamp":0,"isActionBlock":true,"isExtra":false,"isFavourite":false,"lastEditedTimestamp":1745062464399,"localVariables":[{"description":"Date of Orthodox Easter format day.month","dictionary":{"entries":[],"isArray":false,"variableType":4,"type":"Dictionary"},"isActionBlockWorkingVar":false,"isLocalVar":true,"isSecure":false,"m_booleanValue":false,"m_decimalValue":0.0,"m_intValue":0,"m_name":"date","m_stringValue":"","m_type":2,"supportsInput":false,"supportsOutput":true},{"description":"The month of Orthodox Easter","dictionary":{"entries":[],"isArray":false,"variableType":4,"type":"Dictionary"},"isActionBlockWorkingVar":false,"isLocalVar":true,"isSecure":false,"m_booleanValue":false,"m_decimalValue":0.0,"m_intValue":0,"m_name":"month","m_stringValue":"","m_type":2,"supportsInput":false,"supportsOutput":true},{"description":"Orthodox Easter Day","dictionary":{"entries":[],"isArray":false,"variableType":4,"type":"Dictionary"},"isActionBlockWorkingVar":false,"isLocalVar":true,"isSecure":false,"m_booleanValue":false,"m_decimalValue":0.0,"m_intValue":0,"m_name":"day","m_stringValue":"","m_type":2,"supportsInput":false,"supportsOutput":true},{"description":"The year in which you want to know the date of Orthodox Easter","dictionary":{"entries":[],"isArray":false,"variableType":4,"type":"Dictionary"},"isActionBlockWorkingVar":false,"isLocalVar":true,"isSecure":false,"m_booleanValue":false,"m_decimalValue":0.0,"m_intValue":0,"m_name":"year","m_stringValue":"","m_type":1,"supportsInput":true,"supportsOutput":false}],"localVarsAlphabetical":true,"m_GUID":-4927977606121436617,"m_actionList":[{"blockNextAction":true,"consoleVariableName":"date","javascriptEngine":"JetPack JavascriptEngine","scriptText":"//Code by github.com/AlexeiCrystal\nfunction orthodoxEaster(OrthodoxEasterCalculateYear) {\n    const mod19Result \u003d OrthodoxEasterCalculateYear % 19;\n    const mod4Result \u003d OrthodoxEasterCalculateYear % 4;\n    const mod7Result \u003d OrthodoxEasterCalculateYear % 7;\n    const phase1 \u003d (19 * mod19Result + 15) % 30;\n    const phase2 \u003d (2 * mod4Result + 4 * mod7Result + 6 * phase1 + 6) % 7;\n    let initialDay \u003d 22 + phase1 + phase2;\n    let initialMonth \u003d 2;\n    if (initialDay \u003e 31) {\n        initialMonth \u003d 3; \n        initialDay -\u003d 31;\n    }\n    const tempDate \u003d new Date(OrthodoxEasterCalculateYear, initialMonth, initialDay);\n    tempDate.setDate(tempDate.getDate() + 13);\n    const adjustedDay \u003d tempDate.getDate();\n    const adjustedMonth \u003d tempDate.getMonth() + 1;\n    return `${adjustedDay}.${adjustedMonth}`;\n}\n\nfunction orthodoxEasterDay(OrthodoxEasterCalculateYear) {\n    const orthodoxDateResult \u003d orthodoxEaster(OrthodoxEasterCalculateYear);\n    return parseInt(orthodoxDateResult.split(\u0027.\u0027)[0], 10);\n}\n\nfunction orthodoxEasterMonth(OrthodoxEasterCalculateYear) {\n    const orthodoxDateResult \u003d orthodoxEaster(OrthodoxEasterCalculateYear);\n    return parseInt(orthodoxDateResult.split(\u0027.\u0027)[1], 10);\n}\nconsole.log(orthodoxEaster({lv\u003dyear}));","disableLogging":false,"m_SIGUID":-8900430115749201390,"m_classType":"JavaScriptAction","m_comment":"Code by github.com/AlexeiCrystal","m_constraintList":[],"m_isDisabled":false,"m_isOrCondition":false},{"blockNextAction":true,"consoleVariableName":"day","javascriptEngine":"JetPack JavascriptEngine","scriptText":"//Code by github.com/AlexeiCrystal\nfunction orthodoxEaster(OrthodoxEasterCalculateYear) {\n    const mod19Result \u003d OrthodoxEasterCalculateYear % 19;\n    const mod4Result \u003d OrthodoxEasterCalculateYear % 4;\n    const mod7Result \u003d OrthodoxEasterCalculateYear % 7;\n    const phase1 \u003d (19 * mod19Result + 15) % 30;\n    const phase2 \u003d (2 * mod4Result + 4 * mod7Result + 6 * phase1 + 6) % 7;\n    let initialDay \u003d 22 + phase1 + phase2;\n    let initialMonth \u003d 2;\n    if (initialDay \u003e 31) {\n        initialMonth \u003d 3; \n        initialDay -\u003d 31;\n    }\n    const tempDate \u003d new Date(OrthodoxEasterCalculateYear, initialMonth, initialDay);\n    tempDate.setDate(tempDate.getDate() + 13);\n    const adjustedDay \u003d tempDate.getDate();\n    const adjustedMonth \u003d tempDate.getMonth() + 1;\n    return `${adjustedDay}.${adjustedMonth}`;\n}\n\nfunction orthodoxEasterDay(OrthodoxEasterCalculateYear) {\n    const orthodoxDateResult \u003d orthodoxEaster(OrthodoxEasterCalculateYear);\n    return parseInt(orthodoxDateResult.split(\u0027.\u0027)[0], 10);\n}\n\nfunction orthodoxEasterMonth(OrthodoxEasterCalculateYear) {\n    const orthodoxDateResult \u003d orthodoxEaster(OrthodoxEasterCalculateYear);\n    return parseInt(orthodoxDateResult.split(\u0027.\u0027)[1], 10);\n}\nconsole.log(orthodoxEasterDay({lv\u003dyear}));","disableLogging":false,"m_SIGUID":-4675664005195577345,"m_classType":"JavaScriptAction","m_comment":"Code by github.com/AlexeiCrystal","m_constraintList":[],"m_isDisabled":false,"m_isOrCondition":false},{"blockNextAction":true,"consoleVariableName":"month","javascriptEngine":"JetPack JavascriptEngine","scriptText":"//Code by github.com/AlexeiCrystal\nfunction orthodoxEaster(OrthodoxEasterCalculateYear) {\n    const mod19Result \u003d OrthodoxEasterCalculateYear % 19;\n    const mod4Result \u003d OrthodoxEasterCalculateYear % 4;\n    const mod7Result \u003d OrthodoxEasterCalculateYear % 7;\n    const phase1 \u003d (19 * mod19Result + 15) % 30;\n    const phase2 \u003d (2 * mod4Result + 4 * mod7Result + 6 * phase1 + 6) % 7;\n    let initialDay \u003d 22 + phase1 + phase2;\n    let initialMonth \u003d 2;\n    if (initialDay \u003e 31) {\n        initialMonth \u003d 3; \n        initialDay -\u003d 31;\n    }\n    const tempDate \u003d new Date(OrthodoxEasterCalculateYear, initialMonth, initialDay);\n    tempDate.setDate(tempDate.getDate() + 13);\n    const adjustedDay \u003d tempDate.getDate();\n    const adjustedMonth \u003d tempDate.getMonth() + 1;\n    return `${adjustedDay}.${adjustedMonth}`;\n}\n\nfunction orthodoxEasterDay(OrthodoxEasterCalculateYear) {\n    const orthodoxDateResult \u003d orthodoxEaster(OrthodoxEasterCalculateYear);\n    return parseInt(orthodoxDateResult.split(\u0027.\u0027)[0], 10);\n}\n\nfunction orthodoxEasterMonth(OrthodoxEasterCalculateYear) {\n    const orthodoxDateResult \u003d orthodoxEaster(OrthodoxEasterCalculateYear);\n    return parseInt(orthodoxDateResult.split(\u0027.\u0027)[1], 10);\n}\nconsole.log(orthodoxEasterMonth({lv\u003dyear}));","disableLogging":false,"m_SIGUID":-4974577826123866987,"m_classType":"JavaScriptAction","m_comment":"Code by github.com/AlexeiCrystal","m_constraintList":[],"m_isDisabled":false,"m_isOrCondition":false}],"m_category":"Без категории","m_constraintList":[],"m_description":"Code by github.com/AlexeiCrystal","m_descriptionOpen":false,"m_enabled":false,"m_excludeLog":false,"m_headingColor":0,"m_isOrCondition":false,"m_name":"Orthodox-Easter","m_triggerList":[]},"macroExportVersion":1}